{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#publish-with-actions","title":"Publish with Actions","text":"<pre><code>    .github/workflows   # Create folders\n    ci.yml                      # Create file for automated actions in Github\n</code></pre> ci.yml<pre><code>name: ci\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - uses: actions/cache@v2\n        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: pip install mkdocs-material\n      - run: pip install pillow cairosvg\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"#add-to-github-pages","title":"Add to GitHub pages","text":"<p>Go to your resository on github</p> <ul> <li>Go to Settings &gt; Pages &gt; Build and deploymet &gt; <code>Deploy from a branch</code></li> <li>Goto Settings &gt; Pages &gt; Branch  and  select &gt;<code>gh-pages</code></li> </ul> <p>Now your ci.yml file should be deploid automatically.</p>"},{"location":"#publishdeploy-without-actions","title":"Publish/deploy without Actions","text":"<p>In Github enterprize Actions is not allowed (at least @UGent). You need to deploy manually. Full documentation is found here.</p>"},{"location":"#the-short-of-it","title":"The short of it","text":"<p>Consider this project layout</p> <pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>Issue following command in the project directory <pre><code>mkdocs gh-deploy\n</code></pre></p>"},{"location":"git/","title":"GIT - the works","text":""},{"location":"git/#step-1-initialize-a-local-git-repository","title":"Step 1: Initialize a Local Git Repository","text":"<ol> <li>Open Terminal/Command Prompt:</li> <li>Use Git Bash, Command Prompt, or PowerShell on Windows.</li> <li> <p>Use Terminal on macOS or Linux.</p> </li> <li> <p>Navigate to the Folder:    <pre><code>cd /path/to/your/local/folder\n</code></pre>    Replace <code>/path/to/your/local/folder</code> with the path to your folder.</p> </li> <li> <p>Initialize the Git Repository:    <pre><code>git init\n</code></pre>    This command initializes a new Git repository in your local folder.</p> </li> </ol>"},{"location":"git/#step-2-add-files-and-make-an-initial-commit","title":"Step 2: Add Files and Make an Initial Commit","text":"<ol> <li> <p>Add Files to the Repository:    <pre><code>git add .\n</code></pre>    This adds all files in the current directory to the staging area.</p> </li> <li> <p>Make an Initial Commit:    <pre><code>git commit -m \"Initial commit\"\n</code></pre>    This commits the staged files to the repository with the message \"Initial commit.\"</p> </li> </ol>"},{"location":"git/#step-3-create-a-new-repository-on-github","title":"Step 3: Create a New Repository on GitHub","text":"<ol> <li> <p>Log in to GitHub:    Go to GitHub and log in to your account.</p> </li> <li> <p>Create a New Repository:</p> </li> <li>Click the \"+\" icon at the top-right corner and select \"New repository.\"</li> <li>Fill in the repository name and description.</li> <li>Choose whether the repository should be Public or Private.</li> <li> <p>Do not initialize the repository with a README, <code>.gitignore</code>, or license.</p> </li> <li> <p>Create the Repository:</p> </li> <li>Click \"Create repository.\"</li> </ol>"},{"location":"git/#step-4-link-local-repository-to-remote-github-repository","title":"Step 4: Link Local Repository to Remote GitHub Repository","text":"<ol> <li>Copy the Remote Repository URL:</li> <li> <p>On the new repository page, copy the SSH URL (e.g., <code>git@github.com:username/repository.git</code>).</p> </li> <li> <p>Add the Remote Repository:    <pre><code>git remote add origin git@github.com:username/repository.git\n</code></pre>    Replace <code>git@github.com:username/repository.git</code> with your copied URL.</p> </li> <li> <p>Push the Local Repository to GitHub:    <pre><code>git push -u origin master\n</code></pre>    This pushes your local commits to GitHub. The <code>-u</code> flag sets the upstream tracking for the <code>master</code> branch.</p> </li> </ol>"},{"location":"git/#step-5-set-up-ssh-access-to-github","title":"Step 5: Set Up SSH Access to GitHub","text":"<ol> <li> <p>Check for Existing SSH Keys:    <pre><code>ls -al ~/.ssh\n</code></pre>    Check if you already have SSH key pairs like <code>id_rsa</code> and <code>id_rsa.pub</code>.</p> </li> <li> <p>Generate a New SSH Key (if needed):    <pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre>    Replace <code>\"your_email@example.com\"</code> with your GitHub email. Accept the default file location and set a passphrase if desired.</p> </li> <li> <p>Add SSH Key to the SSH Agent:    Start the SSH agent:    <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre>    Add your SSH private key:    <pre><code>ssh-add ~/.ssh/id_rsa\n</code></pre></p> </li> <li> <p>Add SSH Key to GitHub:</p> </li> <li>Copy the SSH key to your clipboard:      <pre><code>cat ~/.ssh/id_rsa.pub\n</code></pre>      Copy the output.</li> <li>Go to GitHub -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key.</li> <li> <p>Paste the key, give it a title, and click \"Add SSH key.\"</p> </li> <li> <p>Modify the <code>.ssh/config</code> File:</p> </li> <li>Open or create the <code>.ssh/config</code> file:      <pre><code>nano ~/.ssh/config\n</code></pre></li> <li> <p>Add the following configuration:      <pre><code># Configuration for HOST1 access\nHost HOST1\n    HostName 000.000.11.30\n    User User1\n    IdentityFile ~/.ssh/id_rsa_HOST1\n\n# Configuration for HOST2 access\nHost HOST2\n    HostName 000.000.11.11\n    User User2\n    Port 22\n    IdentityFile ~/.ssh/id_rsa_HOST2\n\n# Configuration for GitHub access (git-HOST3 account)\nHost git-HOST3\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_git-HOST3\n    AddKeysToAgent yes\n\n# Configuration for GitHub access (git-HOST4 enterprise account)\nHost git-enterprise\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_wsl_git-HOST4\n    AddKeysToAgent yes\n</code></pre></p> </li> <li> <p>Test SSH Connection:    <pre><code>ssh -T git@git-HOST3\n</code></pre>    This command tests if you can authenticate with GitHub using the configured key. You should see a message like <code>Hi username! You've successfully authenticated...</code>.</p> </li> </ol>"},{"location":"git/#step-6-configure-git-settings-for-the-folder","title":"Step 6: Configure Git Settings for the Folder","text":"<ol> <li> <p>Set Your Username and Email:    <pre><code>git config user.name \"Your Name\"\ngit config user.email \"your_email@example.com\"\n</code></pre>    Replace <code>\"Your Name\"</code> and <code>\"your_email@example.com\"</code> with your actual name and email.</p> </li> <li> <p>Set Default Push Behavior:    <pre><code>git config push.default simple\n</code></pre>    This ensures that <code>git push</code> pushes only the current branch.</p> </li> <li> <p>Verify Your Configuration:    <pre><code>git config --list\n</code></pre>    This command lists all your Git configurations to verify they are set correctly.</p> </li> </ol>"},{"location":"git/#step-7-using-git-in-your-project","title":"Step 7: Using Git in Your Project","text":"<ol> <li> <p>Check Status:    <pre><code>git status\n</code></pre></p> </li> <li> <p>Stage Changes:    <pre><code>git add .\n</code></pre></p> </li> <li> <p>Commit Changes:    <pre><code>git commit -m \"Your commit message\"\n</code></pre></p> </li> <li> <p>Push Changes:    <pre><code>git push\n</code></pre></p> </li> </ol> <p>This complete guide will help you set up a local Git repository, connect it to a GitHub repository using SSH, and configure your SSH and Git settings properly.</p>"},{"location":"page2/","title":"Markdown examples","text":""},{"location":"page2/#code-blocks","title":"code blocks","text":"pythonshell <pre><code># Hello world example (Python)\nprint(\"Hello World!\")\nzero_to_ten_double = [2*x for x in range(10)]\n</code></pre> <pre><code># Hello world example (Python)\nprint(\"Hello World!\")\nzero_to_ten_double = [2*x for x in range(10)]\n</code></pre>"},{"location":"page2/#code-blocks-with-title","title":"code blocks with title","text":"hello-world.py<pre><code># Hello world example (Python)\nprint(\"Hello World!\")\nzero_to_ten_double = [2*x for x in range(10)]\n</code></pre>"},{"location":"page2/#code-blocks-with-linenumbers","title":"code blocks with linenumbers","text":"<pre><code># Hello world example (Python)\nprint(\"Hello World!\")\nzero_to_ten_double = [2*x for x in range(10)]\n</code></pre>"},{"location":"page2/#emojis","title":"emojis","text":""},{"location":"page2/#add-notes","title":"add Notes","text":"<p>Note</p> <p>This is a note</p> <p>Danger</p> <p>This is a Danger</p> <p>Warning</p> <p>This is a warning</p> <p>Example</p> <p>This is an Example</p>"}]}